import os

from aiogram import types
from aiogram.dispatcher import FSMContext

from data import config
from keyboards.default import rmenu
from keyboards.inline import menu
from utils.db_api.models import Buttons, Messages, Users, Settings

from states.states import EditValue, EditBot, AddAdmin, DelAdmin

from loader import dp


@dp.callback_query_handler(text_contains="change_")
async def change_smth_handler(call: types.CallbackQuery):
    await call.answer()

    to_change = call.data.split('_')[1]

    if to_change == "buttons":
        await call.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
            reply_markup=menu.change_buttons_markup()
        )
    else:
        await call.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
            reply_markup=menu.change_messages_markup()
        )


@dp.callback_query_handler(text_contains="change|")
async def change_chat_1_handler(call: types.CallbackQuery, state: FSMContext):

    await call.answer()

    chat_value = call.data.split("|")[1]

    await state.finish()

    await EditValue.value_name.set()

    await state.update_data(value_name=chat_value)

    await EditValue.value_body.set()

    await call.message.answer("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ / –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–∏–¥–µ–æ –≤ –±–æ—Ç–∞.</b>", reply_markup=rmenu.cancel_admin_markup())


@dp.message_handler(state=EditValue.value_body, content_types=['animation', 'video', 'document', 'text'])
async def change_chat_2_handler(message: types.Message, state: FSMContext):

    data = await state.get_data()

    value = data['value_name']

    if value == 'pdf_content':
        if message.content_type == 'document':
            body = message.document.file_id
        else:
            return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")

    elif value in ['video_content', 'video_2_content']:
        if message.content_type == 'video':
            body = message.video.file_id
        else:
            return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")

    else:
        body = message.text

    stn = Settings.get(Settings.setting_id == 1)
    setattr(stn, value, body)
    stn.save()

    await state.finish()

    await message.answer("–£—Å–ø–µ—à–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(text_contains="changebtn|")
async def change_btn_1_handler(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    btn_name = call.data.split("|")[1]

    await state.finish()

    await EditBot.value_name.set()

    await state.update_data(value_name=btn_name)

    await EditBot.value_body.set()

    await call.message.answer("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.</b>", reply_markup=rmenu.cancel_admin_markup())


@dp.callback_query_handler(text_contains="changemsg|")
async def change_msg_1_handler(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    msg_name = call.data.split("|")[1]

    await state.finish()

    await EditBot.value_name.set()

    await state.update_data(value_name=msg_name)

    msg = Messages.get(Messages.messages_id == 1)
    text = getattr(msg, msg_name)

    await EditBot.value_body.set()

    await call.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n{text}", reply_markup=rmenu.cancel_admin_markup(), parse_mode=None)


@dp.message_handler(state=EditBot.value_body)
async def change_bot_handler(message: types.Message, state: FSMContext):

    data = await state.get_data()

    value = data['value_name']
    body = message.text

    # –∫–Ω–æ–ø–∫–∞
    if "button" in value:
        btn = Buttons.get(Buttons.buttons_id == 1)
        setattr(btn, value, body)
        btn.save()

        await state.finish()

        await message.answer("–£—Å–ø–µ—à–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())

    # —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        msg = Messages.get(Messages.messages_id == 1)
        setattr(msg, value, body)
        msg.save()

        await state.finish()

        await message.answer("–£—Å–ø–µ—à–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())


# –î–æ–±–∞–≤–∏–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(chat_id=config.ADMINS, text="add_admin")
async def add_admin_init_handler(call: types.CallbackQuery, state: FSMContext):

    await call.answer()

    await AddAdmin.admin_id.set()

    await call.message.answer("üñä –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º.", reply_markup=rmenu.cancel_admin_markup())


@dp.message_handler(state=AddAdmin.admin_id)
async def add_admin_input(message: types.Message, state: FSMContext):

    # –∞–π–¥–∏ –≤–≤–µ–¥–µ–Ω
    if message.text.isdigit():
        try:
            user = Users.get(Users.user_id == message.text)
        except:
            return await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")

    # —é–∑–µ—Ä–Ω–µ–π–º –≤–≤–µ–¥–µ–Ω
    else:
        try:
            user = Users.get(Users.username == message.text)
        except:
            return await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")

    user.is_admin = True
    user.save()

    await state.finish()
    await message.answer("–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())


# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(chat_id=config.ADMINS, text="del_admin")
async def add_admin_init_handler(call: types.CallbackQuery):

    await call.answer()

    await DelAdmin.admin_id.set()

    await call.message.answer("üñä –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º.", reply_markup=rmenu.cancel_admin_markup())


@dp.message_handler(state=DelAdmin.admin_id)
async def add_admin_input(message: types.Message, state: FSMContext):

    # –∞–π–¥–∏ –≤–≤–µ–¥–µ–Ω
    if message.text.isdigit():
        try:
            user = Users.get(Users.user_id == message.text)
        except:
            return await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")

    # —é–∑–µ—Ä–Ω–µ–π–º –≤–≤–µ–¥–µ–Ω
    else:
        try:
            user = Users.get(Users.username == message.text)
        except:
            return await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")

    user.is_admin = False
    user.save()

    await state.finish()
    await message.answer("–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
#
#
# # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Settings (—Å—É–º–º–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç, –ø–æ–∑–∏—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤)
# @dp.callback_query_handler(text="changeentrancesum")
# async def change_entrance_sum_1(call: types.CallbackQuery, state: FSMContext):
#
#     await call.answer()
#
#     await call.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç.", reply_markup=rmenu.cancel_admin_markup())
#
#     await EntranceSum.sum.set()
#
#
# @dp.message_handler(state=EntranceSum.sum)
# async def change_entrance_sum_2(message: types.Message, state: FSMContext):
#
#     if not message.text.isdigit():
#         return await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
#
#     settings = Settings.get(Settings.setting_id == 1)
#     settings.entrance_sum = message.text
#     settings.save()
#
#     await state.finish()
#     await message.answer("–°—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
#
#
# @dp.callback_query_handler(text="changerefsum")
# async def change_entrance_sum_1(call: types.CallbackQuery, state: FSMContext):
#
#     await call.answer()
#
#     await call.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —á–∏—Å–ª–æ–º\n1 - 1-2\n2 - 3-9\n3 - 10+", reply_markup=rmenu.cancel_admin_markup())
#
#     await BonusSum.position.set()
#
#
# @dp.message_handler(state=BonusSum.position)
# async def change_entrance_sum_2(message: types.Message, state: FSMContext):
#
#     if not message.text.isdigit():
#         return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
#
#     if not int(message.text) in [1, 2, 3]:
#         return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
#
#     await state.update_data(position=int(message.text))  # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
#
#     await BonusSum.sum.set()
#
#     await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º–µ–Ω—è—é—Ç—Å—è –Ω–∞—á–∏—Å–ª—è–µ–º—ã–π –±–æ–Ω—É—Å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤ —Ä—É–±–ª—è—Ö).")
#
#
# @dp.message_handler(state=BonusSum.sum)
# async def input_bons_sum_handler(message: types.Message, state: FSMContext):
#
#     if not message.text.isdigit():
#         return await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
#         # await state.finish()
#
#     data = await state.get_data()
#     data = data['position']
#     settings = Settings.get(Settings.setting_id == 1)
#
#     if data == 1:
#         settings.first_bonus = message.text
#     elif data == 2:
#         settings.second_bonus = message.text
#     else:
#         settings.third_bonus = message.text
#
#     settings.save()
#
#     await state.finish()
#     await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=types.ReplyKeyboardRemove())