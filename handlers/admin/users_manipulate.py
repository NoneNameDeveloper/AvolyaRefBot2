from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default import rmenu
from keyboards.inline import menu
from utils.db_api.models import Users

from states.states import ManipulateState, DelBalance

from loader import dp


@dp.callback_query_handler(text_contains="manipulateuser")
async def sending_init_handler(call: types.CallbackQuery):

    await call.answer()
    await call.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–æ—Ç–µ.", reply_markup=rmenu.cancel_admin_markup())

    await ManipulateState.user_id.set()


@dp.message_handler(state=ManipulateState.user_id)
async def manipulate_main_handler(message: types.Message, state: FSMContext):

    # –∞–π–¥–∏ –≤–≤–µ–¥–µ–Ω
    if message.text.isdigit():
        try:
            user = Users.get(Users.user_id == message.text)
        except:
            return await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")

    # —é–∑–µ—Ä–Ω–µ–π–º –≤–≤–µ–¥–µ–Ω
    else:
        try:
            user = Users.get(Users.username == message.text)
        except:
            return await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")

    await message.answer(f"""
üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_id}

üë®‚Äçü¶∞ –ò–º—è: {user.user_name}
üö™ –î–æ—Å—Ç—É–ø: {user.entrance}
üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}
""", reply_markup=menu.user_status_markup(user))

    await state.finish()


@dp.callback_query_handler(text_contains="manipulate_")
async def user_action_handler(call: types.CallbackQuery, state: FSMContext):

    await call.answer()

    action = call.data.split("_")[2]
    user_id = call.data.split("_")[1]

    user = Users.get(Users.user_id == user_id)
    if action == "block":
        user.banned = True
        user.save()

        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", reply_markup=types.ReplyKeyboardRemove())

    elif action == "unblock":
        user.banned = False
        user.save()
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", reply_markup=types.ReplyKeyboardRemove())

    elif action == "delete":
        user.delete_instance()
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã!", reply_markup=types.ReplyKeyboardRemove())

    elif action == "allow":
        user.entrance = True
        user.save()
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –≤ —á–∞—Ç!", reply_markup=types.ReplyKeyboardRemove())
    else:
        user.entrance = False
        user.save()
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç!", reply_markup=types.ReplyKeyboardRemove())

    await state.finish()


# –≤—ã—á–∏—Ç–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query_handler(text_contains="delbalance_")
async def minus_balance_from_user_1(call: types.CallbackQuery, state: FSMContext):

    await call.answer()

    user_id = call.data.split('_')[1]

    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —É–±–∞–≤–∏—Ç—Å—è –±–∞–ª–∞–Ω—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=rmenu.cancel_admin_markup())

    await DelBalance.value.set()
    await state.update_data(user_id=user_id)


@dp.message_handler(state=DelBalance.value)
async def del_balance_prod(message: types.Message, state: FSMContext):

    try:
        int(message.text)
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")

    data = await state.get_data()
    user_id = data['user_id']

    user_info = Users.get(Users.user_id == user_id)
    user_info.balance -= int(message.text)
    user_info.save()

    await message.answer("–£—Å–ø–µ—à–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
    return await state.finish()
