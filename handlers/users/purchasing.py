from datetime import datetime


from aiogram import types
from aiogram.dispatcher import FSMContext
from yookassa import Configuration, Payment

from data import config
from data.config import MessagesList
from keyboards.default import rmenu
from keyboards.inline import menu
from utils.db_api.models import Settings, Users

from loader import dp


@dp.callback_query_handler(text="buy_entrance")
async def buy_entrance_handler(call: types.CallbackQuery):

    settings = Settings.get(Settings.setting_id == 1)
    # —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç
    entrance_sum = str(round(settings.entrance_sum))

    await call.message.answer(f"""
üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –í–∞–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ</b>

üí∏ <i>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {entrance_sum} ‚ÇΩ</i>
""", reply_markup=menu.choose_payment_method())


@dp.callback_query_handler(text_contains="buy_")
async def choose_country_buy_method(call: types.CallbackQuery):
    data = call.data.split("_")[1]

    settings = Settings.get(Settings.setting_id == 1)
    # —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç
    entrance_sum = (round(settings.entrance_sum))

    if data == "rf":
        await call.message.answer(f"""
üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –í–∞–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ</b>

üí∏ <i>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {entrance_sum} ‚ÇΩ</i>
""", reply_markup=menu.choose_payment_method_rf())

    # stripe
    if data == "norf":
        NOMENKLATURE_TEXT = "–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç"
        prices = [types.LabeledPrice(NOMENKLATURE_TEXT, entrance_sum * 100)]

        payload = f"{call.message.chat.id}_{entrance_sum}"

        try:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
            await dp.bot.send_invoice(
                chat_id=call.message.chat.id,
                title=NOMENKLATURE_TEXT,
                description="\n\n",
                payload=payload,
                provider_token=config.STRIPE_API,
                currency="rub",
                prices=prices,
            )
        except Exception as e:
            print(e)
            await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.')


@dp.pre_checkout_query_handler(state='*')
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):

    await dp.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(state='*', content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message, state: FSMContext):

    await state.finish()

    payment = message.successful_payment.to_python()
    payload = payment['invoice_payload']

    chat_id = message.chat.id

    paymet_sum = payment['total_amount'] / 100

    user = Users.get(Users.user_id == chat_id)
    ref_id = user.referral_id
    user.payment_sum = paymet_sum
    user.payment_date = datetime.now()
    user.payment_type = "STRIPE"
    user.entrance = True
    user.save()

    if ref_id:
        settings = Settings.get(Settings.setting_id == 1)
        refs_count = Users.select().where((Users.referral_id == ref_id) & (Users.entrance == True)).count()

        if 1 <= refs_count <= 2:
            bonus = settings.first_bonus
        elif 3 <= refs_count <= 9:
            bonus = settings.second_bonus
        elif refs_count >= 10:
            bonus = settings.third_bonus
        else:
            bonus = 0

        ref_sum = bonus  # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–º—É, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –∫—É–ø–∏—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        refman = Users.get(Users.user_id == ref_id)
        refman.balance += ref_sum
        refman.save()

        await dp.bot.send_message(ref_id, MessagesList.main_menu_messages()[8].replace("{sum}", str(ref_sum)))

    link_to_chat = await dp.bot.create_chat_invite_link(config.PAY_CHAT(), member_limit=1)

    await message.answer(MessagesList.main_menu_messages()[10], reply_markup=rmenu.main_markup())
    await message.answer_photo(photo=MessagesList.main_menu_messages()[11],
                                    caption=MessagesList.main_menu_messages()[9],
                                    reply_markup=menu.private_entrance_markup(link_to_chat.invite_link))


@dp.callback_query_handler(text_contains="method|")
async def choose_pay_method_handler(call: types.CallbackQuery):
    # await call.answer()

    method = call.data.split("|")[1]

    chat_id = call.message.chat.id

    settings = Settings.get(Settings.setting_id == 1)
    # —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç
    entrance_sum = str(round(settings.entrance_sum))

    bot_data = await dp.bot.get_me()
    bot_username = bot_data.username

    success_url = 'https://t.me/%s?start=%s' % (bot_username, str(chat_id))

    Configuration.configure("315589", "live_D9-KYv8I76lGaHll0ZNrEkMMKUu-sE2wF8UShxrUhWE")

    try:
        if method != "sbp":
            payment = Payment.create({
                "amount": {
                    "value": entrance_sum,
                    "currency": "RUB"
                },
                "payment_method_data": {
                    "type": method,

                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": success_url
                },
                "description": "–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç"
            })
        else:
            payment = Payment.create({
                "amount": {
                    "value": entrance_sum,
                    "currency": "RUB"
                },
                "payment_method_data": {
                    "type": method,

                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": success_url
                },
                "capture": True,
                "description": "–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç"
            })
    except Exception as e:
        return await call.answer("–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–π.")

    await call.message.delete()

    await call.message.answer("""
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –æ–ø–ª–∞—Ç—É.
2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É".
""", reply_markup=menu.pay_markup(payment.confirmation.confirmation_url, payment.id))


@dp.callback_query_handler(state='*', text_contains="check_payment_")
async def process_successful_payment(call: types.CallbackQuery):

    payment_id = call.data.split("_")[2]
    Configuration.configure(config.WALLET, config.UKASSA_API)
    payment = Payment.find_one(payment_id)
    payment_method = payment.payment_method.type
    if payment.status == "pending":
        return await call.answer("–°—Ä–µ–¥—Å—Ç–≤–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏!")

    await call.answer()

    if payment.status == "waiting_for_capture" or payment_method == "sbp":
        if payment_method != "sbp":
            response = Payment.capture(
                payment_id,
                {
                    "amount": {
                        "value": payment.amount.value,
                        "currency": "RUB"
                    }
                }
            )
            paid = response.paid
        else:
            paid = True

        if paid or payment_method == "sbp":

            chat_id = call.message.chat.id

            paymet_sum = payment.amount.value

            user = Users.get(Users.user_id == chat_id)
            ref_id = user.referral_id
            user.payment_sum = paymet_sum
            user.payment_date = datetime.now()
            user.payment_type = "–Æ–ö–ê–°–°–ê"
            user.entrance = True
            user.save()

            await call.message.delete()

            if ref_id:
                settings = Settings.get(Settings.setting_id == 1)
                refs_count = Users.select().where(Users.referral_id == ref_id).count()

                if 1 <= refs_count <= 2:
                    bonus = settings.first_bonus
                elif 3 <= refs_count <= 9:
                    bonus = settings.second_bonus
                elif refs_count >= 10:
                    bonus = settings.third_bonus
                else:
                    bonus = 0

                ref_sum = bonus  # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–º—É, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –∫—É–ø–∏—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                refman = Users.get(Users.user_id == ref_id)
                refman.balance += ref_sum
                refman.save()

                await dp.bot.send_message(ref_id, MessagesList.main_menu_messages()[8].replace("{sum}", str(ref_sum)))

            link_to_chat = await dp.bot.create_chat_invite_link(config.PAY_CHAT(), member_limit=1)

            await call.message.answer(MessagesList.main_menu_messages()[10], reply_markup=rmenu.main_markup())
            await call.message.answer_photo(photo=MessagesList.main_menu_messages()[11], caption=MessagesList.main_menu_messages()[9], reply_markup=menu.private_entrance_markup(link_to_chat.invite_link))

