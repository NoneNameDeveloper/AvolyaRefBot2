from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from utils.db_api.models import Users, Buttons, Messages


def admin_main_markup():
    """
    –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
    """
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
        InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="del_admin")
    )
    markup.add(
        InlineKeyboardButton("üë®‚Äçüíº –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="manipulateuser")
    )
    markup.add(
        InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="sending")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫", callback_data="change_buttons")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="change_messages")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏–µ 1 (–∫–æ–ª-–≤–æ)", callback_data="change|pdf_count_condition")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏–µ 2 (–∫–æ–ª-–≤–æ)", callback_data="change|video_count_condition")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏–µ 3 (–∫–æ–ª-–≤–æ)", callback_data="change|video_2_count_condition")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º–µ–Ω–∏—Ç—å PDF", callback_data="change|pdf_content")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ 1", callback_data="change|video_content")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ 2", callback_data="change|video_2_content")
    )
    markup.add(
        InlineKeyboardButton("‚èπ –ò–∑–º. —á–∞—Ç ID", callback_data="change|free_chat_id")
    )
    # markup.add(
    #     InlineKeyboardButton("‚èπ –ò–∑–º. –°—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç", callback_data="change|free_chat_link")
    # )
    markup.add(
        InlineKeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ", callback_data="table_1")
    )
    markup.add(
        InlineKeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—ã—á–Ω—ã—Ö", callback_data="table_2")
    )
    markup.add(
        InlineKeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–æ–≤", callback_data="table_4")
    )

    return markup


def user_status_markup(user_info):
    """
    –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(
            text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not user_info.banned else "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"manipulate_{user_info.user_id}_block" if not user_info.banned else f"manipulate_{user_info.user_id}_unblock"
        ),
        InlineKeyboardButton(
            text="‚ö∞Ô∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"manipulate_{user_info.user_id}_delete"
        ),
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data=f"manipulate_{user_info.user_id}_add"
        )
    )

    return markup


def change_buttons_markup():
    """
    —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    markup = InlineKeyboardMarkup(row_width=2)

    btn_list = Buttons.get(Buttons.buttons_id == 1)

    for u in btn_list.__dict__['__data__'].keys():
        if '_id' not in u:
            markup.add(
                InlineKeyboardButton(
                    text=btn_list.__dict__['__data__'][u], callback_data=f"changebtn|{u}"
                )
            )

    return markup


def change_messages_markup():
    """
    —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    markup = InlineKeyboardMarkup(row_width=2)

    messages_list = Messages.get(Messages.messages_id == 1)

    for u in messages_list.__dict__['__data__'].keys():
        if '_id' not in u:
            markup.add(
                InlineKeyboardButton(
                    text=messages_list.__dict__['__data__'][u], callback_data=f"changemsg|{u}"
                )
            )

    return markup


def back_to_refs_markup():
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_refs')
    )

    return markup


def rate_markup():
    """
    –≤—ã–≤–æ–¥ —Ç–æ–ø 10 —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤
    """
    markup = InlineKeyboardMarkup(row_width=2)

    buttons = Buttons.get(Buttons.buttons_id == 1)

    markup.add(
        InlineKeyboardButton(buttons.ref_list_button, callback_data="my_refs"),
        InlineKeyboardButton(buttons.rating_button, callback_data="rating")
    )

    return markup


def partner_markup(link):
    """
    –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π
    """
    markup = InlineKeyboardMarkup()

    buttons = Buttons.get(Buttons.buttons_id == 1)

    markup.add(
        InlineKeyboardButton(buttons.share_button, url=f"https://t.me/share/url?url={link}")
    )

    return markup


def paginate_top(data: list[Users], page: int = 0):
    """–ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–ø–∞"""
    markup = InlineKeyboardMarkup()

    per_page = 10

    data = list(data)
    total_count = len(data)

    serv_btns = []

    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 10
    if len(data) <= per_page:
        print("None")
        return None

    if page > 0:
        serv_btns.append(
            InlineKeyboardButton(text="<<", callback_data=f"open_page|{page - 1}")
        )

    print(total_count)
    if total_count > (page+1) * per_page:
        serv_btns.append(
            InlineKeyboardButton(text=">>", callback_data=f"open_page|{page + 1}")
        )

    markup.add(*serv_btns)

    markup.add(
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_refs')
    )

    return markup